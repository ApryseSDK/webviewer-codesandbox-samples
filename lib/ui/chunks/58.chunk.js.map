{"version":3,"sources":["webpack:///./src/ui/src/constants/displayModeObjects.js","webpack:///./src/ui/src/components/ViewControlsOverlay/ViewControlsOverlay.js","webpack:///./src/ui/src/components/ViewControlsOverlay/index.js"],"names":["displayMode","pageTransition","layout","ViewControlsOverlay","t","useTranslation","store","useStore","useSelector","state","selectors","getTotalPages","getDisplayMode","isElementDisabled","DataElements","VIEW_CONTROLS_OVERLAY","isReaderMode","isMultiViewerMode","isFullScreen","getActiveDocumentViewerKey","getIsMultiTab","totalPages","isDisabled","activeDocumentViewerKey","isMultiTab","isPageTransitionEnabled","documentViewer","core","getDocumentViewer","displayModeManager","getDisplayModeManager","isVirtualDisplayEnabled","showCompareButton","isIE11","handleClick","setDisplayMode","displayModeObject","displayModeObjects","find","obj","exitReaderMode","setTimeout","showReaderButton","isFullPDFEnabled","getDocument","getType","FlyoutMenu","menu","trigger","VIEW_CONTROLS_OVERLAY_BUTTON","ariaLabel","DataElementWrapper","dataElement","className","classNames","row","active","onClick","Button","title","img","isActive","role","enterReaderMode","rotateClockwise","ActionButton","rotateCounterClockwise","dispatch","actions","setIsMultiViewerMode","isIOS","isIOSFullScreenSupported","toggleFullscreen"],"mappings":"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","file":"chunks/58.chunk.js","sourcesContent":["export default [\r\n  {\r\n    displayMode: 'Single',\r\n    pageTransition: 'default',\r\n    layout: 'single',\r\n  },\r\n  {\r\n    displayMode: 'Continuous',\r\n    pageTransition: 'continuous',\r\n    layout: 'single',\r\n  },\r\n  {\r\n    displayMode: 'Facing',\r\n    pageTransition: 'default',\r\n    layout: 'double',\r\n  },\r\n  {\r\n    displayMode: 'FacingContinuous',\r\n    pageTransition: 'continuous',\r\n    layout: 'double',\r\n  },\r\n  {\r\n    displayMode: 'CoverFacing',\r\n    pageTransition: 'default',\r\n    layout: 'cover',\r\n  },\r\n  {\r\n    displayMode: 'Cover',\r\n    pageTransition: 'continuous',\r\n    layout: 'cover',\r\n  },\r\n];","import classNames from 'classnames';\r\nimport ActionButton from 'components/ActionButton';\r\nimport Button from 'components/Button';\r\nimport displayModeObjects from 'constants/displayModeObjects';\r\nimport core from 'core';\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport selectors from 'selectors';\r\nimport FlyoutMenu from '../FlyoutMenu/FlyoutMenu';\r\nimport DataElementWrapper from 'components/DataElementWrapper';\r\nimport { enterReaderMode, exitReaderMode } from 'helpers/readerMode';\r\nimport actions from 'actions';\r\nimport toggleFullscreen from 'helpers/toggleFullscreen';\r\nimport DataElements from 'src/constants/dataElement';\r\nimport { isIE11, isIOS, isIOSFullScreenSupported } from 'helpers/device';\r\n\r\nfunction ViewControlsOverlay() {\r\n  const [t] = useTranslation();\r\n  const store = useStore();\r\n\r\n  const [\r\n    totalPages,\r\n    displayMode,\r\n    isDisabled,\r\n    isReaderMode,\r\n    isMultiViewerMode,\r\n    isFullScreen,\r\n    activeDocumentViewerKey,\r\n    isMultiTab,\r\n  ] = useSelector((state) => [\r\n    selectors.getTotalPages(state),\r\n    selectors.getDisplayMode(state),\r\n    selectors.isElementDisabled(state, DataElements.VIEW_CONTROLS_OVERLAY),\r\n    selectors.isReaderMode(state),\r\n    selectors.isMultiViewerMode(state),\r\n    selectors.isFullScreen(state),\r\n    selectors.getActiveDocumentViewerKey(state),\r\n    selectors.getIsMultiTab(state)\r\n  ]);\r\n\r\n  const totalPageThreshold = 1000;\r\n  let isPageTransitionEnabled = totalPages < totalPageThreshold;\r\n\r\n  const documentViewer = core.getDocumentViewer();\r\n  const displayModeManager = documentViewer?.getDisplayModeManager();\r\n  if (displayModeManager && displayModeManager.isVirtualDisplayEnabled()) {\r\n    isPageTransitionEnabled = true;\r\n  }\r\n\r\n  const showCompareButton = !isIE11 && !isMultiTab;\r\n  const toggleCompareMode = () => {\r\n    store.dispatch(actions.setIsMultiViewerMode(!isMultiViewerMode));\r\n  };\r\n\r\n  const handleClick = (pageTransition, layout) => {\r\n    const setDisplayMode = () => {\r\n      const displayModeObject = displayModeObjects.find(\r\n        (obj) => obj.pageTransition === pageTransition && obj.layout === layout,\r\n      );\r\n      core.setDisplayMode(displayModeObject.displayMode);\r\n    };\r\n\r\n    if (isReaderMode) {\r\n      exitReaderMode(store);\r\n      setTimeout(() => {\r\n        setDisplayMode();\r\n      });\r\n    } else {\r\n      setDisplayMode();\r\n    }\r\n  };\r\n\r\n  const handleReaderModeClick = () => {\r\n    if (isReaderMode) {\r\n      return;\r\n    }\r\n    enterReaderMode(store);\r\n  };\r\n\r\n  if (isDisabled) {\r\n    return null;\r\n  }\r\n\r\n  let pageTransition;\r\n  let layout;\r\n\r\n  const displayModeObject = displayModeObjects.find((obj) => obj.displayMode === displayMode);\r\n  if (displayModeObject) {\r\n    pageTransition = displayModeObject.pageTransition;\r\n    layout = displayModeObject.layout;\r\n  }\r\n\r\n  const showReaderButton = core.isFullPDFEnabled() && core.getDocument()?.getType() === 'pdf';\r\n  // Full screen is supported in iPad OS for non-video elements, but not in iOS\r\n  const renderFullScreenToggle = () => {\r\n    if (isIOS && !isIOSFullScreenSupported) {\r\n      return null;\r\n    }\r\n    return (\r\n      <>\r\n        <DataElementWrapper\r\n          dataElement=\"viewControlsDivider3\"\r\n          className=\"divider\"\r\n        />\r\n        <DataElementWrapper\r\n          className=\"row\"\r\n          onClick={toggleFullscreen}\r\n          dataElement=\"fullScreenButton\"\r\n        >\r\n          <Button\r\n            img={isFullScreen ? 'icon-header-full-screen-exit' : 'icon-header-full-screen'}\r\n            role=\"option\"\r\n          />\r\n          <div className=\"title\">{isFullScreen ? t('action.exitFullscreen') : t('action.enterFullscreen')}</div>\r\n        </DataElementWrapper>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FlyoutMenu\r\n      menu={DataElements.VIEW_CONTROLS_OVERLAY}\r\n      trigger={DataElements.VIEW_CONTROLS_OVERLAY_BUTTON}\r\n      ariaLabel={t('component.viewControlsOverlay')}\r\n    >\r\n      {isPageTransitionEnabled && (\r\n        <>\r\n          <DataElementWrapper\r\n            dataElement=\"pageTransitionHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('option.displayMode.pageTransition')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: (pageTransition === 'continuous' && !isReaderMode) })}\r\n            onClick={() => handleClick('continuous', layout)}\r\n            dataElement=\"continuousPageTransitionButton\"\r\n          >\r\n            <Button\r\n              title=\"option.pageTransition.continuous\"\r\n              img=\"icon-header-page-manipulation-page-transition-continuous-page-line\"\r\n              isActive={pageTransition === 'continuous' && !isReaderMode}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.pageTransition.continuous')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: (pageTransition === 'default' && !isReaderMode) })}\r\n            onClick={() => handleClick('default', layout)}\r\n            dataElement=\"defaultPageTransitionButton\"\r\n          >\r\n            <Button\r\n              title=\"option.pageTransition.default\"\r\n              img=\"icon-header-page-manipulation-page-transition-page-by-page-line\"\r\n              isActive={pageTransition === 'default' && !isReaderMode}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.pageTransition.default')}</div>\r\n          </DataElementWrapper>\r\n          {showReaderButton && (\r\n            <DataElementWrapper\r\n              className={classNames({ row: true, active: isReaderMode })}\r\n              onClick={() => handleReaderModeClick()}\r\n              dataElement=\"readerPageTransitionButton\"\r\n            >\r\n              <Button\r\n                title=\"option.pageTransition.reader\"\r\n                img=\"icon-header-page-manipulation-page-transition-reader\"\r\n                isActive={isReaderMode}\r\n                role=\"option\"\r\n              />\r\n              <div className=\"title\">{t('option.pageTransition.reader')}</div>\r\n            </DataElementWrapper>\r\n          )}\r\n          {!isReaderMode && (\r\n            <DataElementWrapper\r\n              dataElement=\"viewControlsDivider1\"\r\n              className=\"divider\"\r\n            />\r\n          )}\r\n        </>\r\n      )}\r\n      {!isReaderMode && (\r\n        <>\r\n          <DataElementWrapper\r\n            dataElement=\"rotateHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('action.rotate')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateClockwise(activeDocumentViewerKey)} dataElement=\"rotateClockwiseButton\">\r\n            <ActionButton\r\n              title=\"action.rotateClockwise\"\r\n              img=\"icon-header-page-manipulation-page-rotation-clockwise-line\"\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('action.rotateClockwise')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper className=\"row\" onClick={() => core.rotateCounterClockwise(activeDocumentViewerKey)} dataElement=\"rotateCounterClockwiseButton\">\r\n            <ActionButton\r\n              title=\"action.rotateCounterClockwise\"\r\n              img=\"icon-header-page-manipulation-page-rotation-counterclockwise-line\"\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('action.rotateCounterClockwise')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            dataElement=\"viewControlsDivider2\"\r\n            className=\"divider\"\r\n          />\r\n          <DataElementWrapper\r\n            dataElement=\"layoutHeader\"\r\n            className=\"type\"\r\n          >\r\n            {t('option.displayMode.layout')}\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'single' })}\r\n            onClick={() => handleClick(pageTransition, 'single')}\r\n            dataElement=\"singleLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.single\"\r\n              img=\"icon-header-page-manipulation-page-layout-single-page-line\"\r\n              isActive={layout === 'single'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.single')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'double' })}\r\n            onClick={() => handleClick(pageTransition, 'double')}\r\n            dataElement=\"doubleLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.double\"\r\n              img=\"icon-header-page-manipulation-page-layout-double-page-line\"\r\n              isActive={layout === 'double'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.double')}</div>\r\n          </DataElementWrapper>\r\n          <DataElementWrapper\r\n            className={classNames({ row: true, active: layout === 'cover' })}\r\n            onClick={() => handleClick(pageTransition, 'cover')}\r\n            dataElement=\"coverLayoutButton\"\r\n          >\r\n            <Button\r\n              title=\"option.layout.cover\"\r\n              img=\"icon-header-page-manipulation-page-layout-cover-line\"\r\n              isActive={layout === 'cover'}\r\n              role=\"option\"\r\n            />\r\n            <div className=\"title\">{t('option.layout.cover')}</div>\r\n          </DataElementWrapper>\r\n          {showCompareButton && (\r\n            <DataElementWrapper\r\n              className={classNames({ row: true, active: isMultiViewerMode })}\r\n              onClick={toggleCompareMode}\r\n              dataElement=\"toggleCompareModeButton\"\r\n            >\r\n              <Button\r\n                title=\"action.comparePages\"\r\n                img=\"icon-header-compare\"\r\n                isActive={isMultiViewerMode}\r\n                role=\"option\"\r\n              />\r\n              <div className=\"title\">{t('action.comparePages')}</div>\r\n            </DataElementWrapper>\r\n          )}\r\n        </>\r\n      )}\r\n      {renderFullScreenToggle()}\r\n    </FlyoutMenu>\r\n  );\r\n}\r\n\r\nexport default ViewControlsOverlay;\r\n","import ViewControlsOverlay from './ViewControlsOverlay';\r\n\r\nexport default ViewControlsOverlay;"],"sourceRoot":""}