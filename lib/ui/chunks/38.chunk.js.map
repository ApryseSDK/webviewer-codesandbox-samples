{"version":3,"sources":["webpack:///./src/ui/src/components/MeasurementOverlay/MeasurementOverlay.scss?deaa","webpack:///./src/ui/src/components/MeasurementOverlay/MeasurementOverlay.scss","webpack:///./src/ui/src/components/MeasurementOverlay/CustomMeasurementOverlay.js","webpack:///./src/ui/src/components/MeasurementOverlay/CountMeasurementOverlay.js","webpack:///./src/ui/src/components/MeasurementOverlay/MeasurementOverlay.js","webpack:///./src/ui/src/components/MeasurementOverlay/index.js"],"names":["api","content","__esModule","default","module","i","options","styleTag","webComponents","document","getElementsByTagName","length","clonedStyleTags","webComponent","shadowRoot","appendChild","onload","forEach","styleNode","innerHTML","cloneNode","push","head","exports","locals","CustomMeasurementOverlay","props","type","mapAnnotationToKey","annotation","CustomEllipseMeasurementOverlay","console","error","renderAppropriateOverlay","factor","annotationKey","icon","getDataWithKey","t","distanceMeasurementTool","core","getTool","precision","defaults","Precision","scale","Scale","measure","Measure","unit","className","Icon","glyph","title","label","min","value","axis","toFixed","onChange","event","propTypes","PropTypes","object","isRequired","func","string","withTranslation","CountMeasurementOverlay","useTranslation","annotationCount","getAnnotationsList","filter","getCustomData","MeasurementOverlay","setValue","isDisabled","useSelector","state","selectors","isElementDisabled","DataElements","MEASUREMENT_OVERLAY","forceUpdate","useState","dispatch","useDispatch","x","y","position","setPosition","transparentBackground","setTransparentBackground","isCreatingAnnotation","setIsCreatingAnnotation","isOpen","isElementOpen","activeToolName","getActiveToolName","customMeasurementOverlay","getCustomMeasurementOverlay","overlayRef","useRef","key","shouldShowCustomOverlay","annot","includes","isCountMeasurementAnnotation","some","overlay","validate","onMouseMove","e","tool","useTransparentBackground","insideRect","overlayElement","overlayRect","getBoundingClientRect","touches","TouchEvent","clientX","clientY","left","right","top","bottom","isMouseInsideRect","current","drawMode","getToolMode","getDrawMode","annotUnderMouse","getAnnotationByMouseEvent","actions","openElement","onAnnotationChanged","annotations","action","closeElement","useEffect","addEventListener","removeEventListener","cancel","onDrag","onStop","classNames","Overlay","open","closed","transparent","ref","data-element","customOverlay","renderOverlay"],"mappings":"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","file":"chunks/38.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../../node_modules/sass-loader/dist/cjs.js!./MeasurementOverlay.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function (styleTag) {\r\n                const webComponents = document.getElementsByTagName('apryse-webviewer');\r\n                if (webComponents.length > 0) {\r\n                  const clonedStyleTags = [];\r\n                  for (let i = 0; i < webComponents.length; i++) {\r\n                    const webComponent = webComponents[i];\r\n                    if (i === 0) {\r\n                      webComponent.shadowRoot.appendChild(styleTag);\r\n                      styleTag.onload = function () {\r\n                        if (clonedStyleTags.length > 0) {\r\n                          clonedStyleTags.forEach((styleNode) => {\r\n                            // eslint-disable-next-line no-unsanitized/property\r\n                            styleNode.innerHTML = styleTag.innerHTML;\r\n                          });\r\n                        }\r\n                      };\r\n                    } else {\r\n                      const styleNode = styleTag.cloneNode(true);\r\n                      webComponent.shadowRoot.appendChild(styleNode);\r\n                      clonedStyleTags.push(styleNode);\r\n                    }\r\n                  }\r\n                } else {\r\n                  document.head.appendChild(styleTag);\r\n                }\r\n              };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".open.MeasurementOverlay{visibility:visible}.closed.MeasurementOverlay{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.MeasurementOverlay{position:absolute;z-index:95;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);background:var(--component-background);flex-direction:column;bottom:60px;right:14px;font-size:16px;min-width:215px;padding:6px}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .MeasurementOverlay{bottom:8px;right:8px;padding:8px;font-size:14px}}.MeasurementOverlay>*{margin:6px}.MeasurementOverlay.transparent{opacity:.5;pointer-events:none}.measurement__value{display:flex;flex-direction:row}.measurement__value .distance-show{margin-left:3px;cursor:pointer}.measurement__title{display:flex;justify-content:center;align-items:center}.measurement__title .measurement__icon{margin-right:5px}.measurement__deltas{display:flex;justify-content:space-between}.lineMeasurementInput{width:50px;margin-left:4px}.length_input{margin-bottom:3px}.angle_input{margin-top:3px}.angle_input .lineMeasurementInput{width:65px}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"LEFT_HEADER_WIDTH\": \"41px\",\n\t\"RIGHT_HEADER_WIDTH\": \"41px\"\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withTranslation } from 'react-i18next';\r\nimport Icon from 'components/Icon';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey, getDataWithKey } from '../../constants/map';\r\n\r\nfunction CustomMeasurementOverlay(props) {\r\n  const renderAppropriateOverlay = (type) => {\r\n    const annotationType = mapAnnotationToKey(props.annotation);\r\n    switch (annotationType) {\r\n      case 'ellipse':\r\n        return <CustomEllipseMeasurementOverlay {...props}/>;\r\n      default:\r\n        console.error(`Custom overlay for annotation type: ${type} not supported`);\r\n    }\r\n  };\r\n  return (renderAppropriateOverlay(props.type));\r\n}\r\n\r\nCustomMeasurementOverlay.propTypes = {\r\n  annotation: PropTypes.object.isRequired,\r\n  value: PropTypes.func.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  t: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nfunction CustomEllipseMeasurementOverlay(props) {\r\n  const annotationKey = mapAnnotationToKey(props.annotation);\r\n  const { icon } = getDataWithKey(annotationKey);\r\n  const { t } = props;\r\n\r\n  // Get the Scale, Precision and Units from\r\n  // the AnnotationCreateDistanceMeasurement tool as these do not exist\r\n  // in the Ellipse annotation\r\n  const distanceMeasurementTool = core.getTool('AnnotationCreateDistanceMeasurement');\r\n  const precision = distanceMeasurementTool.defaults.Precision;\r\n  const scale = distanceMeasurementTool.defaults.Scale;\r\n  const measure = distanceMeasurementTool.Measure;\r\n  const unit = scale[1][1];\r\n\r\n\r\n  const renderScaleRatio = () => `${scale[0][0]} ${scale[0][1]} = ${scale[1][0]} ${scale[1][1]}`;\r\n\r\n  const computeRadius = () => {\r\n    const decimalPlaces = 2;\r\n    const factor = measure.axis[0].factor;\r\n    const radiusInPts = props.value(props.annotation).toFixed(decimalPlaces);\r\n    return (radiusInPts * factor).toFixed(decimalPlaces);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"measurement__title\">\r\n        {icon && <Icon className=\"measurement__icon\" glyph={icon} />}\r\n        {props.title}\r\n      </div>\r\n      <div className=\"measurement__scale\">\r\n        {t('option.measurementOverlay.scale')}: {renderScaleRatio()}\r\n      </div>\r\n      <div className=\"measurement__precision\">\r\n        {t('option.shared.precision')}: {precision}\r\n      </div>\r\n      <div className=\"measurement__value\">\r\n        {props.label}: <input className=\"lineMeasurementInput\" type=\"number\" min=\"0\" value={computeRadius()} onChange={(event) => props.onChange(event, props.annotation)}/> {unit}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCustomEllipseMeasurementOverlay.propTypes = CustomMeasurementOverlay.propTypes;\r\n\r\nexport default withTranslation()(CustomMeasurementOverlay);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Icon from 'components/Icon';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey, getDataWithKey } from '../../constants/map';\r\n\r\nCountMeasurementOverlay.propTypes = {\r\n  annotation: PropTypes.object.isRequired\r\n};\r\n\r\nfunction CountMeasurementOverlay(props) {\r\n  const annotationKey = mapAnnotationToKey(props.annotation);\r\n  const { icon } = getDataWithKey(annotationKey);\r\n  const { t } = useTranslation();\r\n  const annotationList = core.getAnnotationsList();\r\n\r\n  const measurementAnnotationsList = annotationList.filter((annotation) => {\r\n    return annotation.getCustomData('trn-is-count');\r\n  });\r\n  const annotationCount = measurementAnnotationsList.length;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"measurement__title\">\r\n        {icon && <Icon className=\"measurement__icon\" glyph={icon} />}\r\n        {t('option.measurementOverlay.countMeasurement')}\r\n      </div>\r\n      <div className=\"measurement__count\">\r\n        {t('option.measurementOverlay.count')}: {annotationCount}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CountMeasurementOverlay;","import React, { useState, useRef, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport Draggable from 'react-draggable';\r\nimport PropTypes from 'prop-types';\r\nimport core from 'core';\r\nimport { mapAnnotationToKey } from 'constants/map';\r\nimport actions from 'actions';\r\nimport selectors from 'selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport CustomMeasurementOverlay from './CustomMeasurementOverlay';\r\nimport CountMeasurementOverlay from './CountMeasurementOverlay';\r\nimport DataElements from 'constants/dataElement';\r\n\r\nimport './MeasurementOverlay.scss';\r\n\r\nconst isMouseInsideRect = (e, overlayElement) => {\r\n  if (overlayElement === null) {\r\n    return false;\r\n  }\r\n\r\n  const overlayRect = overlayElement.getBoundingClientRect();\r\n  let x; let y;\r\n  if (e.touches && e instanceof TouchEvent) {\r\n    x = e.touches[0].clientX;\r\n    y = e.touches[0].clientY;\r\n  } else {\r\n    x = e.clientX;\r\n    y = e.clientY;\r\n  }\r\n  return (\r\n    x >= overlayRect.left &&\r\n    x <= overlayRect.right &&\r\n    y >= overlayRect.top &&\r\n    y <= overlayRect.bottom\r\n  );\r\n};\r\n\r\nconst isCountMeasurementAnnotation = (annot) => ['countMeasurement'].includes(mapAnnotationToKey(annot));\r\n\r\n// create your forceUpdate hook\r\nfunction useForceUpdate() {\r\n  const [, setValue] = useState(0); // integer state\r\n  return () => setValue((value) => value + 1); // update state to force render\r\n}\r\n\r\nconst propTypes = {\r\n  annotation: PropTypes.object,\r\n};\r\n\r\nconst MeasurementOverlay = (props) => {\r\n  const { annotation } = props;\r\n  const isDisabled = useSelector((state) => selectors.isElementDisabled(state, DataElements.MEASUREMENT_OVERLAY));\r\n\r\n  const forceUpdate = useForceUpdate();\r\n  const dispatch = useDispatch();\r\n  const [position, setPosition] = useState({ x: 0, y: 0 });\r\n  const [transparentBackground, setTransparentBackground] = useState(false);\r\n  const [isCreatingAnnotation, setIsCreatingAnnotation] = useState(false);\r\n  const isOpen = useSelector((state) => selectors.isElementOpen(state, DataElements.MEASUREMENT_OVERLAY));\r\n  const activeToolName = useSelector((state) => selectors.getActiveToolName(state));\r\n  const customMeasurementOverlay = useSelector((state) => selectors.getCustomMeasurementOverlay(state));\r\n  const overlayRef = useRef();\r\n  const key = mapAnnotationToKey(annotation);\r\n\r\n  const shouldShowCustomOverlay = (annot) => (!isCountMeasurementAnnotation(annot) && customMeasurementOverlay.some((overlay) => overlay.validate(annot)));\r\n\r\n  const renderOverlay = (annot, key) => {\r\n    if (shouldShowCustomOverlay(annot)) {\r\n      return (\r\n        <CustomMeasurementOverlay\r\n          annotation={annot}\r\n          {...customMeasurementOverlay.filter((customOverlay) => customOverlay.validate(annot)\r\n          )[0]}\r\n        />\r\n      );\r\n    }\r\n    if (key === 'countMeasurement') {\r\n      return <CountMeasurementOverlay annotation={annot} />;\r\n    }\r\n  };\r\n\r\n  const onMouseMove = (e) => {\r\n    const tool = core.getTool(activeToolName);\r\n\r\n    if (annotation) {\r\n      const insideRect = isMouseInsideRect(e, overlayRef.current);\r\n      let useTransparentBackground;\r\n\r\n      if (isCreatingAnnotation) {\r\n        const drawMode = core.getToolMode().getDrawMode?.();\r\n        useTransparentBackground = insideRect && drawMode !== 'twoClicks';\r\n      } else {\r\n        const annotUnderMouse = core.getAnnotationByMouseEvent(e);\r\n        useTransparentBackground = insideRect && annotUnderMouse === annotation;\r\n      }\r\n      setTransparentBackground(useTransparentBackground);\r\n      forceUpdate();\r\n    } else if (shouldShowCustomOverlay(tool.annotation)) {\r\n      dispatch(actions.openElement(DataElements.MEASUREMENT_OVERLAY));\r\n      // this.setState({ annotation: tool.annotation });\r\n      // we know we are creating an annotation at this point because tool.annotation is truthy\r\n      setIsCreatingAnnotation(true);\r\n    }\r\n  };\r\n\r\n  const onAnnotationChanged = (annotations, action) => {\r\n    // measurement overlay will open and show the annotation information when we are creating an annotation using measurement tools\r\n    // since by default we don't auto select an annotation after it's created, we close the overlay here to avoid the confusion\r\n    // where no annotation is selected but measurement overlay shows the information about the annotation we were creating\r\n    if (\r\n      action === 'add' &&\r\n      annotations.length === 1 &&\r\n      annotations[0] === annotation\r\n    ) {\r\n      dispatch(actions.closeElement(DataElements.MEASUREMENT_OVERLAY));\r\n    }\r\n\r\n    if (\r\n      action === 'modify' &&\r\n      annotations.length === 1 &&\r\n      annotations[0] === annotation\r\n    ) {\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    core.addEventListener('mouseMove', onMouseMove);\r\n    core.addEventListener('annotationChanged', onAnnotationChanged);\r\n    return () => {\r\n      core.removeEventListener('mouseMove', onMouseMove);\r\n      core.removeEventListener('annotationChanged', onAnnotationChanged);\r\n    };\r\n  }, []);\r\n\r\n  if (isDisabled || !annotation) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Draggable\r\n      cancel=\"input\"\r\n      position={position}\r\n      onDrag={(e, { x, y }) => setPosition({ x, y })}\r\n      onStop={(e, { x, y }) => setPosition({ x, y })}\r\n    >\r\n      <div\r\n        className={classNames({\r\n          Overlay: true,\r\n          MeasurementOverlay: true,\r\n          open: isOpen,\r\n          closed: !isOpen,\r\n          transparent: transparentBackground,\r\n        })}\r\n        ref={overlayRef}\r\n        data-element={DataElements.MEASUREMENT_OVERLAY}\r\n      >\r\n        {renderOverlay(annotation, key)}\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nMeasurementOverlay.propTypes = propTypes;\r\n\r\nexport default MeasurementOverlay;\r\n","import MeasurementOverlay from './MeasurementOverlay';\r\n\r\nexport default MeasurementOverlay;"],"sourceRoot":""}