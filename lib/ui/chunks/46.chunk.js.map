{"version":3,"sources":["webpack:///./src/ui/src/components/SignatureValidationModal/SignatureValidationModal.scss?83e1","webpack:///./src/ui/src/components/SignatureValidationModal/SignatureValidationModal.scss","webpack:///./src/ui/src/components/SignatureValidationModal/SignatureValidationModal.js","webpack:///./src/ui/src/components/SignatureValidationModal/index.js"],"names":["api","content","__esModule","default","module","i","options","styleTag","webComponents","document","getElementsByTagName","length","clonedStyleTags","webComponent","shadowRoot","appendChild","onload","forEach","styleNode","innerHTML","cloneNode","push","head","exports","locals","SignatureValidationModal","containerRef","useRef","translate","useTranslation","useSelector","state","validationModalWidgetName","digitalSignatureValidation","selectors","isElementOpen","DataElements","SIGNATURE_VALIDATION_MODAL","getVerificationResult","shallowEqual","isOpen","verificationResult","dispatch","useDispatch","closeModal","actions","closeElements","useOnClickOutside","useEffect","SIGNATURE_MODAL","LOADING_MODAL","PRINT_MODAL","ERROR_MODAL","PASSWORD_MODAL","badgeIcon","verificationStatus","permissionStatus","isCertification","documentPermission","trustVerificationResultString","timeOfTrustVerificationEnum","trustVerificationTime","digestAlgorithm","digestStatus","documentStatus","trustStatus","signerName","window","Core","PDFNet","DigestAlgorithm","DigitalSignatureField","VerificationOptions","VerificationResult","ModificationPermissionsStatus","TrustStatus","DigestStatus","DocumentStatus","TimeMode","className","classNames","Modal","open","closed","data-element","ref","status","typeCapitalized","type","SignatureIcon","badge","size","name","interpolation","escapeValue","renderHeader","renderPermissionStatus","editor","DocumentPermissions","e_no_changes_allowed","e_formfilling_signing_allowed","e_annotating_formfilling_signing_allowed","e_unrestricted","renderDocumentPermission","verificationType","e_trust_verified","e_untrusted","e_trust_verification_disabled","e_no_trust_status","renderTrustStatus","e_current","e_signing","e_timestamp","renderTrustVerification","e_no_error","e_corrupt_file","e_unsigned","e_bad_byteranges","e_corrupt_cryptographic_contents","renderDocumentStatus","e_digest_invalid","e_digest_verified","e_digest_verification_disabled","e_weak_digest_algorithm_but_digest_verifiable","e_no_digest_status","e_unsupported_encoding","renderDigestStatus","Type","e_SHA1","e_SHA256","e_SHA384","e_SHA512","e_RIPEMD160","e_unknown_digest_algorithm","renderDigestAlgorithm","onClick"],"mappings":"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","file":"chunks/46.chunk.js","sourcesContent":["var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/index.js!../../../../../node_modules/postcss-loader/src/index.js??postcss!../../../../../node_modules/sass-loader/dist/cjs.js!./SignatureValidationModal.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = function (styleTag) {\r\n                const webComponents = document.getElementsByTagName('apryse-webviewer');\r\n                if (webComponents.length > 0) {\r\n                  const clonedStyleTags = [];\r\n                  for (let i = 0; i < webComponents.length; i++) {\r\n                    const webComponent = webComponents[i];\r\n                    if (i === 0) {\r\n                      webComponent.shadowRoot.appendChild(styleTag);\r\n                      styleTag.onload = function () {\r\n                        if (clonedStyleTags.length > 0) {\r\n                          clonedStyleTags.forEach((styleNode) => {\r\n                            // eslint-disable-next-line no-unsanitized/property\r\n                            styleNode.innerHTML = styleTag.innerHTML;\r\n                          });\r\n                        }\r\n                      };\r\n                    } else {\r\n                      const styleNode = styleTag.cloneNode(true);\r\n                      webComponent.shadowRoot.appendChild(styleNode);\r\n                      clonedStyleTags.push(styleNode);\r\n                    }\r\n                  }\r\n                } else {\r\n                  document.head.appendChild(styleTag);\r\n                }\r\n              };\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".open.SignatureValidationModal{visibility:visible}.closed.SignatureValidationModal{visibility:hidden}:host{display:inline-block;container-type:inline-size;width:100%;height:100%;overflow:hidden}@media(min-width:901px){.App:not(.is-web-component) .hide-in-desktop{display:none}}@container (min-width: 901px){.hide-in-desktop{display:none}}@media(min-width:641px)and (max-width:900px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .hide-in-tablet{display:none}}@container (min-width: 641px) and (max-width: 900px){.App.is-web-component:not(.is-in-desktop-only-mode) .hide-in-tablet{display:none}}@media(max-width:640px)and (min-width:431px){.App:not(.is-web-component) .hide-in-mobile{display:none}}@container (max-width: 640px) and (min-width: 431px){.App.is-web-component .hide-in-mobile{display:none}}@media(max-width:430px){.App:not(.is-web-component) .hide-in-small-mobile{display:none}}@container (max-width: 430px){.App.is-web-component .hide-in-small-mobile{display:none}}.always-hide{display:none}.SignatureValidationModal{position:fixed;left:0;bottom:0;z-index:100;width:100%;height:100%;display:flex;justify-content:center;align-items:center;background:var(--modal-negative-space)}.SignatureValidationModal .modal-container .wrapper .modal-content{padding:10px}.SignatureValidationModal .footer{display:flex;flex-direction:row;justify-content:flex-end;width:100%;margin-top:13px}.SignatureValidationModal .footer.modal-footer{padding:16px;margin:0;border-top:1px solid var(--divider)}.SignatureValidationModal .footer .modal-button{display:flex;justify-content:center;align-items:center;padding:6px 18px;margin:8px 0 0;width:auto;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;border-radius:4px;height:30px;cursor:pointer}.SignatureValidationModal .footer .modal-button.cancel{color:var(--secondary-button-text);border:1px solid var(--secondary-button-text)}.SignatureValidationModal .footer .modal-button.cancel:hover{background-color:var(--document-background-color);color:var(--secondary-button-hover);border:1px solid var(--secondary-button-hover)}.SignatureValidationModal .footer .modal-button.confirm{margin-left:4px;color:var(--primary-button-text);font-weight:600;background:var(--primary-button)}.SignatureValidationModal .footer .modal-button.confirm:hover{background:var(--primary-button-hover)}.SignatureValidationModal .footer .modal-button.confirm.disabled{background:var(--primary-button)!important;opacity:.5}.SignatureValidationModal .footer .modal-button.secondary-btn-custom{border-radius:4px;border:1px solid var(--primary-button);color:var(--primary-button);padding:2px 20px 4px;cursor:pointer;background-color:#fff}.SignatureValidationModal .footer .modal-button.secondary-btn-custom:hover{color:var(--secondary-button-hover)}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .SignatureValidationModal .footer .modal-button{padding:23px 8px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .SignatureValidationModal .footer .modal-button{padding:23px 8px}}.SignatureValidationModal .swipe-indicator{background:var(--divider);border-radius:2px;height:4px;width:38px;position:absolute;top:12px;margin-left:auto;margin-right:auto;left:0;right:0}@media(min-width:641px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .SignatureValidationModal .swipe-indicator{display:none}}@container (min-width: 641px){.App.is-web-component:not(.is-in-desktop-only-mode) .SignatureValidationModal .swipe-indicator{display:none}}.SignatureValidationModal .container{background:var(--component-background);overflow-y:auto;max-height:100%}@media(max-height:500px){.App:not(.is-web-component) .SignatureValidationModal .container,.SignatureValidationModal .App:not(.is-web-component) .container{overflow:auto;max-height:100%}}@container (max-height: 500px){.App.is-web-component .SignatureValidationModal .container,.SignatureValidationModal .App.is-web-component .container{overflow:auto;max-height:100%}}.SignatureValidationModal .container{display:flex;flex-direction:column;justify-content:space-around;border-radius:4px;box-shadow:0 0 3px 0 var(--document-box-shadow);min-width:350px;padding:20px;max-width:630px}.SignatureValidationModal .validation-header{position:relative;display:flex;justify-content:left;align-items:center;padding-bottom:20px;font-size:16px}.SignatureValidationModal .validation-header [data-element=signatureValidationModalCloseButton]{position:absolute;right:0}.SignatureValidationModal .validation-header [data-element=signatureValidationModalCloseButton]:hover{background:none}.SignatureValidationModal .summary-box{position:relative;display:flex;border:1px solid #dee2e6;border-radius:5px;padding:16px;font-weight:700}.SignatureValidationModal .summary-box>:not(:first-child){margin-left:8px}.SignatureValidationModal .validation-header-valid{background-color:#8dd88d}.SignatureValidationModal .validation-header-warning{background-color:#e2b719}.SignatureValidationModal .validation-header-error{background-color:#ff7979}.SignatureValidationModal .validation-header-unknown{background-color:#ddd}.SignatureValidationModal .body{margin-top:16px}.SignatureValidationModal div.body>div.section:first-child{margin-top:0}.SignatureValidationModal div.body>div.section{margin:16px;padding-bottom:16px;border-bottom:1px solid var(--gray-4)}.SignatureValidationModal div.body>div.section:last-child{margin-bottom:0}.SignatureValidationModal div.body>div.section>p{font-size:13px;margin:8px 0}.SignatureValidationModal div.body>div.section>p:last-child{margin:0}.SignatureValidationModal .header{font-weight:700}.SignatureValidationModal .modal-footer{display:flex;justify-content:flex-end;margin-top:32px}.SignatureValidationModal .modal-footer .close-modal-button{background:var(--primary-button);border:1px;border-color:var(--primary-button);border-radius:4px;padding:0 16px;height:32px;display:flex;align-items:center;justify-content:center;position:relative;color:var(--primary-button-text);cursor:pointer}@media(max-width:640px){.App:not(.is-in-desktop-only-mode):not(.is-web-component) .SignatureValidationModal .modal-footer .close-modal-button{height:40px;width:128px}}@container (max-width: 640px){.App.is-web-component:not(.is-in-desktop-only-mode) .SignatureValidationModal .modal-footer .close-modal-button{height:40px;width:128px}}.SignatureValidationModal .modal-footer .close-modal-button:hover{background:var(--primary-button-hover)}\", \"\"]);\n\n// exports\nexports.locals = {\n\t\"LEFT_HEADER_WIDTH\": \"41px\",\n\t\"RIGHT_HEADER_WIDTH\": \"41px\"\n};","import React, { useRef, useEffect } from 'react';\r\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport classNames from 'classnames';\r\nimport selectors from 'selectors';\r\nimport DataElements from 'constants/dataElement';\r\n\r\nimport {\r\n  renderPermissionStatus,\r\n  Spinner,\r\n} from 'components/SignaturePanel';\r\nimport SignatureIcon from 'components/SignaturePanel/SignatureIcon';\r\nimport useOnClickOutside from 'hooks/useOnClickOutside';\r\n\r\nimport actions from 'actions';\r\n\r\nimport './SignatureValidationModal.scss';\r\n\r\nconst SignatureValidationModal = () => {\r\n  const containerRef = useRef();\r\n  const [translate] = useTranslation();\r\n\r\n  const [isOpen, verificationResult] = useSelector(\r\n    (state) => {\r\n      const { validationModalWidgetName } = state.digitalSignatureValidation;\r\n      return [\r\n        selectors.isElementOpen(state, DataElements.SIGNATURE_VALIDATION_MODAL),\r\n        selectors.getVerificationResult(state, validationModalWidgetName),\r\n      ];\r\n    },\r\n    shallowEqual,\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const closeModal = () => {\r\n    dispatch(actions.closeElements([DataElements.SIGNATURE_VALIDATION_MODAL]));\r\n  };\r\n\r\n  useOnClickOutside(containerRef, closeModal);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      dispatch(\r\n        actions.closeElements([\r\n          DataElements.SIGNATURE_MODAL,\r\n          DataElements.LOADING_MODAL,\r\n          DataElements.PRINT_MODAL,\r\n          DataElements.ERROR_MODAL,\r\n          DataElements.PASSWORD_MODAL,\r\n        ])\r\n      );\r\n    }\r\n  }, [dispatch, isOpen]);\r\n\r\n  /**\r\n   * @todo Figure out if this useEffect is still needed? Component appears to be\r\n   * operating normally without it.\r\n   */\r\n  /*\r\n  useEffect(() => {\r\n    const onDigitalSignatureAvailable = widget => {\r\n      setWidgetName(widget.getField().name);\r\n      dispatch(actions.openElements(['signatureValidationModal']));\r\n    };\r\n\r\n    core.addEventListener(\r\n      'digitalSignatureAvailable',\r\n      onDigitalSignatureAvailable,\r\n    );\r\n    return () => core.removeEventListener(\r\n      'digitalSignatureAvailable',\r\n      onDigitalSignatureAvailable,\r\n    );\r\n  }, [dispatch]);\r\n  */\r\n\r\n  const {\r\n    badgeIcon,\r\n    verificationStatus,\r\n    permissionStatus,\r\n    isCertification,\r\n    documentPermission,\r\n    trustVerificationResultString,\r\n    timeOfTrustVerificationEnum,\r\n    trustVerificationTime,\r\n    digestAlgorithm,\r\n    digestStatus,\r\n    documentStatus,\r\n    trustStatus,\r\n    signerName,\r\n  } = verificationResult;\r\n  const {\r\n    DigestAlgorithm,\r\n    DigitalSignatureField,\r\n    VerificationOptions,\r\n    VerificationResult,\r\n  } = window.Core.PDFNet;\r\n  const {\r\n    ModificationPermissionsStatus,\r\n    TrustStatus,\r\n    DigestStatus,\r\n    DocumentStatus,\r\n  } = VerificationResult;\r\n  const { TimeMode } = VerificationOptions;\r\n\r\n  const renderHeader = () => {\r\n    let status;\r\n    switch (badgeIcon) {\r\n      case 'digital_signature_valid':\r\n        status = translate('digitalSignatureModal.valid');\r\n        break;\r\n      case 'digital_signature_warning':\r\n        status = translate('digitalSignatureModal.unknown');\r\n        break;\r\n      case 'digital_signature_error':\r\n        status = translate('digitalSignatureModal.invalid');\r\n        break;\r\n      default:\r\n        status = translate('digitalSignatureModal.unknown');\r\n    }\r\n\r\n    const typeCapitalized = isCertification\r\n      ? translate('digitalSignatureModal.Certification')\r\n      : translate('digitalSignatureModal.Signature');\r\n\r\n    const type = isCertification\r\n      ? translate('digitalSignatureModal.certification')\r\n      : translate('digitalSignatureModal.signature');\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"validation-header\">\r\n          {translate('digitalSignatureModal.title', { type: typeCapitalized })}\r\n        </div>\r\n        <div className=\"summary-box\">\r\n          <SignatureIcon badge={badgeIcon} size=\"medium\"/>\r\n          <div>\r\n            {\r\n              translate(\r\n                'digitalSignatureModal.summaryBox.summary',\r\n                {\r\n                  type,\r\n                  status,\r\n                }\r\n              )\r\n            }\r\n            {\r\n              badgeIcon === 'digital_signature_valid'\r\n                ? translate(\r\n                  'digitalSignatureModal.summaryBox.signedBy',\r\n                  {\r\n                    name: signerName || translate('digitalSignatureModal.unknown'),\r\n                    interpolation: { escapeValue: false }\r\n                  },\r\n                ) : ''\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Returns a message in a <p> tag corresponding to the enum value of\r\n   * documentPermission, which originates from the invocation of\r\n   * PDFNet.DigitalSignatureField.getDocumentPermissions\r\n   */\r\n  const renderDocumentPermission = () => {\r\n    if (!documentPermission) {\r\n      return;\r\n    }\r\n\r\n    let content = '';\r\n    const editor = isCertification ? 'certifier' : 'signer';\r\n\r\n    switch (documentPermission) {\r\n      case DigitalSignatureField.DocumentPermissions.e_no_changes_allowed:\r\n        content += translate('digitalSignatureModal.documentPermission.noChangesAllowed', { editor });\r\n        break;\r\n      case DigitalSignatureField.DocumentPermissions.e_formfilling_signing_allowed:\r\n        content += translate('digitalSignatureModal.documentPermission.formfillingSigningAllowed', { editor });\r\n        break;\r\n      case DigitalSignatureField.DocumentPermissions.e_annotating_formfilling_signing_allowed:\r\n        content += translate('digitalSignatureModal.documentPermission.annotatingFormfillingSigningAllowed', { editor });\r\n        break;\r\n      case DigitalSignatureField.DocumentPermissions.e_unrestricted:\r\n        content += translate('digitalSignatureModal.documentPermission.unrestricted', { editor });\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  /**\r\n   * Returns a message in a <p> tag corresponding to the signature's trust\r\n   * verification result.\r\n   *\r\n   * If trustVerificationResultString is a falsy value (i.e. undefined, null or\r\n   * empty string), originating from the invocation of\r\n   * PDFNet.TrustVerificationResult.getResultString, then a message indicating\r\n   * no trust verification result is rendered.\r\n   *\r\n   * If a trust verification result is available, then the based on\r\n   * timeOfTrustVerificationEnum, which originates from the invocation of\r\n   * PDFNet.TrustVerificationResult.getTimeOfTrustVerificationEnum, an\r\n   * appropriate message is rendered\r\n   */\r\n  const renderTrustVerification = () => {\r\n    if (!trustVerificationResultString) {\r\n      return (\r\n        <p>{translate('digitalSignatureModal.trustVerification.none')}</p>\r\n      );\r\n    }\r\n\r\n    let content = '';\r\n    switch (timeOfTrustVerificationEnum) {\r\n      case (TimeMode.e_current):\r\n        content += translate(\r\n          'digitalSignatureModal.trustVerification.current',\r\n          { trustVerificationTime }\r\n        );\r\n        break;\r\n      case (TimeMode.e_signing):\r\n        content += translate(\r\n          'digitalSignatureModal.trustVerification.signing',\r\n          { trustVerificationTime }\r\n        );\r\n        break;\r\n      case (TimeMode.e_timestamp):\r\n        content += translate(\r\n          'digitalSignatureModal.trustVerification.timestamp',\r\n          { trustVerificationTime }\r\n        );\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  /**\r\n   * Returns a message in a <p> tag corresponding to the signature's digest\r\n   * algorithm, which originates from the invocation of\r\n   * PDFNet.verificationResult.getDigestAlgorithm\r\n   */\r\n  const renderDigestAlgorithm = () => {\r\n    let content = translate('digitalSignatureModal.digestAlgorithm.preamble');\r\n\r\n    switch (digestAlgorithm) {\r\n      case DigestAlgorithm.Type.e_SHA1:\r\n        content += 'SHA1.';\r\n        break;\r\n      case DigestAlgorithm.Type.e_SHA256:\r\n        content += 'SHA256.';\r\n        break;\r\n      case DigestAlgorithm.Type.e_SHA384:\r\n        content += 'SHA384.';\r\n        break;\r\n      case DigestAlgorithm.Type.e_SHA512:\r\n        content += 'SHA512.';\r\n        break;\r\n      case DigestAlgorithm.Type.e_RIPEMD160:\r\n        content += 'RIPEMD160.';\r\n        break;\r\n      case DigestAlgorithm.Type.e_unknown_digest_algorithm:\r\n        content = translate('digitalSignatureModal.digestAlgorithm.unknown');\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  /**\r\n   * Returns a message in a <p> tag corresponding to the boolean trust status of\r\n   * the signature, which originates from evaluating whether or not the value of\r\n   * PDFNet.verificationResult.getTrustStatus is set to the enum\r\n   * PDFNet.verificationResult.trustStatus.e_trust_verified\r\n   *\r\n   * Intentionally an un-used function, as @rdjericpdftron has noted that it\r\n   * is superfluous, but the method has been left behind in-case it could be\r\n   * leveraged in the future\r\n   */\r\n  /*\r\n  const renderSignerIdentityValidity = () => {\r\n    let content = translate('digitalSignatureModal.signerIdentity.preamble');\r\n    if (validSignerIdentity) {\r\n      content += translate('digitalSignatureModal.signerIdentity.valid');\r\n    } else {\r\n      content += translate('digitalSignatureModal.signerIdentity.unknown');\r\n    }\r\n    return <p>{content}</p>;\r\n  };\r\n  */\r\n\r\n  const renderDocumentStatus = () => {\r\n    let content;\r\n\r\n    switch (documentStatus) {\r\n      case DocumentStatus.e_no_error:\r\n        content = translate(\r\n          'digitalSignatureVerification.documentStatus.noError'\r\n        );\r\n        break;\r\n      case DocumentStatus.e_corrupt_file:\r\n        content = translate(\r\n          'digitalSignatureVerification.documentStatus.corruptFile'\r\n        );\r\n        break;\r\n      case DocumentStatus.e_unsigned:\r\n        content = translate(\r\n          'digitalSignatureVerification.documentStatus.unsigned'\r\n        );\r\n        break;\r\n      case DocumentStatus.e_bad_byteranges:\r\n        content = translate(\r\n          'digitalSignatureVerification.documentStatus.badByteRanges'\r\n        );\r\n        break;\r\n      case DocumentStatus.e_corrupt_cryptographic_contents:\r\n        content = translate(\r\n          'digitalSignatureVerification.documentStatus.corruptCryptographicContents'\r\n        );\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  const renderDigestStatus = () => {\r\n    let content;\r\n\r\n    switch (digestStatus) {\r\n      case DigestStatus.e_digest_invalid:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.digestInvalid'\r\n        );\r\n        break;\r\n      case DigestStatus.e_digest_verified:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.digestVerified'\r\n        );\r\n        break;\r\n      case DigestStatus.e_digest_verification_disabled:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.digestVerificationDisabled'\r\n        );\r\n        break;\r\n      case DigestStatus.e_weak_digest_algorithm_but_digest_verifiable:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.weakDigestAlgorithmButDigestVerifiable'\r\n        );\r\n        break;\r\n      case DigestStatus.e_no_digest_status:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.noDigestStatus'\r\n        );\r\n        break;\r\n      case DigestStatus.e_unsupported_encoding:\r\n        content = translate(\r\n          'digitalSignatureVerification.digestStatus.unsupportedEncoding'\r\n        );\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  const renderTrustStatus = () => {\r\n    const verificationType = isCertification\r\n      ? translate('digitalSignatureVerification.certifier')\r\n      : translate('digitalSignatureVerification.signer');\r\n    let content;\r\n\r\n    switch (trustStatus) {\r\n      case TrustStatus.e_trust_verified:\r\n        content = translate(\r\n          'digitalSignatureVerification.trustStatus.trustVerified',\r\n          { verificationType },\r\n        );\r\n        break;\r\n      case TrustStatus.e_untrusted:\r\n        content = translate(\r\n          'digitalSignatureVerification.trustStatus.untrusted'\r\n        );\r\n        break;\r\n      case TrustStatus.e_trust_verification_disabled:\r\n        content = translate(\r\n          'digitalSignatureVerification.trustStatus.trustVerificationDisabled'\r\n        );\r\n        break;\r\n      case TrustStatus.e_no_trust_status:\r\n        content = translate(\r\n          'digitalSignatureVerification.trustStatus.noTrustStatus'\r\n        );\r\n        break;\r\n    }\r\n\r\n    return <p>{content}</p>;\r\n  };\r\n\r\n  const renderDocumentIntegrityHeader = () => (\r\n    <p\r\n      className=\"header\"\r\n    >\r\n      {translate('digitalSignatureModal.header.documentIntegrity')}\r\n    </p>\r\n  );\r\n\r\n  const renderIdentitiesTrustHeader = () => (\r\n    <p\r\n      className=\"header\"\r\n    >\r\n      {translate('digitalSignatureModal.header.identitiesTrust')}\r\n    </p>\r\n  );\r\n\r\n  const renderGeneralErrorsHeader = () => (\r\n    <p\r\n      className=\"header\"\r\n    >\r\n      {translate('digitalSignatureModal.header.generalErrors')}\r\n    </p>\r\n  );\r\n\r\n  const renderDigestStatusHeader = () => (\r\n    <p\r\n      className=\"header\"\r\n    >\r\n      {translate('digitalSignatureModal.header.digestStatus')}\r\n    </p>\r\n  );\r\n\r\n  const renderModalBody = () => {\r\n    if (typeof verificationStatus === 'undefined') {\r\n      return (\r\n        <div className=\"center\">\r\n          <Spinner />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <div className=\"body\">\r\n          <div className=\"section\">\r\n            {renderDocumentIntegrityHeader()}\r\n            {\r\n              renderPermissionStatus({\r\n                isCertification,\r\n                ModificationPermissionsStatus,\r\n                permissionStatus,\r\n                translate,\r\n              })\r\n            }\r\n            {renderDocumentPermission()}\r\n          </div>\r\n          <div className=\"section\">\r\n            {renderIdentitiesTrustHeader()}\r\n            {renderTrustStatus()}\r\n            {renderTrustVerification()}\r\n          </div>\r\n          <div className=\"section\">\r\n            {renderGeneralErrorsHeader()}\r\n            {renderDocumentStatus()}\r\n          </div>\r\n          <div className=\"section\">\r\n            {renderDigestStatusHeader()}\r\n            {renderDigestStatus()}\r\n            {renderDigestAlgorithm()}\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            className=\"close-modal-button\"\r\n            onClick={closeModal}\r\n          >\r\n            OK\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames({\r\n        Modal: true,\r\n        SignatureValidationModal: true,\r\n        open: isOpen,\r\n        closed: !isOpen,\r\n      })}\r\n      data-element={DataElements.SIGNATURE_VALIDATION_MODAL}\r\n    >\r\n      <div className=\"container\" ref={containerRef}>\r\n        {renderHeader()}\r\n        {renderModalBody()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignatureValidationModal;\r\n","import SignatureValidationModal from './SignatureValidationModal';\r\n\r\nexport default SignatureValidationModal;\r\n"],"sourceRoot":""}